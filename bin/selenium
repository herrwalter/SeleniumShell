#!/usr/bin/env php
<?php

class Process
{

    public $cmd = '';
    public $descriptors = array(
        0 => array('pipe', 'r'),
        1 => array('pipe', 'w'),
        2 => array('pipe', 'a')
    );
    public $pipes = null;
    public $desc = '';
    private $strt_tm = 0;
    public $resource = null;
    public $status = null;
    private $exitcode = null;

    function __construct($cmd = '', $desc = '')
    {
        $this->cmd = $cmd;
        $this->desc = $desc;

        $this->resource = proc_open($this->cmd, $this->descriptors, $this->pipes, null, null);

        $this->strt_tm = microtime(true);
    }

    public function isRunning()
    {
        $status = proc_get_status($this->resource);

        /**
         * proc_get_status will only pull valid exitcode one
         * time after process has ended, so cache the exitcode
         * if the process is finished and $exitcode is uninitialized
         */
        if ($status['running'] === false && $this->exitcode === null) {
            $this->exitcode = $status['exitcode'];
            $this->status = $status;
        }

        return $status['running'];
    }

    public function getExitcode()
    {
        return $this->exitcode;
    }

    public function get_elapsed()
    {
        return microtime(TRUE) - $this->strt_tm;
    }

}

$dir = dirname(__DIR__);
chdir($dir . '/core');


$options = getopt('', array('env:', 'host:', 'port:', 'project:', 'browsers:', 'testsuite:', 'session:', 'ignore-solo-run'));
$ssOptions = ' ';
foreach ($options as $key => $value) {
    if (!$value) {
        $value = 'true';
    }
    $ssOptions .= '--ss-' . $key . ' ';
    $ssOptions .= '"' . $value . '" ';
}
$project = '';
if( isset($options['project']) ){
    $project = $options['project'];
}
$sessionName = trim(date('Y.m.d h.i.s', time()) . $project);

exec('phpunit SeleniumShell.php' . $ssOptions . ' --ss-print-tests true --ss-session "'.$sessionName. '"', $tests, $exitcode);
$processes = array();
$finishedProcesses = array();
$start = microtime(true);


$runningInstances = 0;
while (true) {
    $finished = 0;
    
    foreach($tests as $key => $test ){
        if( count($processes) < 20 ){
            $processes[] = new Process('phpunit --filter ' . $test . ' SeleniumShell.php --ss-session "'.$sessionName. '"');
            unset($tests[$key]);
        }
    }
    
    foreach ($processes as $key => $process) {
        if (!$process->isRunning()) {
            $finishedProcesses[] = $process;
            unset($processes[$key]);
            $finished ++;
        }
    }
    
    
    if (empty($tests) && empty($processes)) {
        break;
    } else {
        $finished = 0;
    }
}
$totalTime = microtime(true) - $start;

$exitcode = 0;
foreach ($finishedProcesses as $process) {
    //var_dump(stream_get_contents($process->pipes[1]));
    //var_dump(stream_get_contents($process->pipes[0]));
    //var_dump($process->status);
    if($process->getExitcode() !== 0){
        $exitcode = 1;
    }
}


$resultsPath = dirname(__DIR__ ) . DIRECTORY_SEPARATOR . 'generated' . DIRECTORY_SEPARATOR . 'results' .DIRECTORY_SEPARATOR . $sessionName .DIRECTORY_SEPARATOR;
$results = file_get_contents($resultsPath . 'results.txt');
$errors = file_get_contents($resultsPath. 'errors.txt');
$failures = file_get_contents($resultsPath. 'failures.txt');
$incompletes = file_get_contents($resultsPath . 'incompletes.txt');
$skipped = file_get_contents($resultsPath . 'skipped.txt');

$extraInfo = array('Errors' => $errors,'Failures'=>$failures,'Incompletes' => $incompletes, 'Skipped' => $skipped);
        
echo $results . PHP_EOL;

foreach( $extraInfo as $message => $info ){
    if( $info !== '' ){
        echo PHP_EOL;
        echo $message . ': ' . PHP_EOL. PHP_EOL;
        echo $info . PHP_EOL;
    }
}

echo PHP_EOL . 'Total Runtime: ' . number_format($totalTime, 2); 
exit($exitcode);
